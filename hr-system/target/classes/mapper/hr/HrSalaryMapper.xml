<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.diandian.hr.mapper.HrSalaryMapper">
    
    <resultMap type="HrSalary" id="HrSalaryResult">
        <result property="salaryId"    column="salary_id"    />
        <result property="salaryName"    column="salary_name"    />
        <result property="basicSalary"    column="basic_salary"    />
        <result property="bonus"    column="bonus"    />
        <result property="lunchSalary"    column="lunch_salary"    />
        <result property="trafficSalary"    column="traffic_salary"    />
        <result property="allSalary"    column="all_salary"    />
        <result property="pensionBase"    column="pension_base"    />
        <result property="pensionPer"    column="pension_per"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateTime"    column="update_time"    />
        <result property="medicalBase"    column="medical_base"    />
        <result property="medicalPer"    column="medical_per"    />
        <result property="accumulationFundbase"    column="accumulation_fundbase"    />
        <result property="accumulationFundper"    column="accumulation_fundper"    />
    </resultMap>

    <sql id="selectHrSalaryVo">
        select salary_id, salary_name, basic_salary, bonus, lunch_salary, traffic_salary,
        all_salary, pension_base, pension_per, create_time, medical_base, medical_per, create_time, update_time,
        accumulation_fundbase, accumulation_fundper from hr_salary
    </sql>

    <select id="selectHrSalaryList" parameterType="HrSalary" resultMap="HrSalaryResult">
        <include refid="selectHrSalaryVo"/>
        <where>  
            <if test="salaryName != null  and salaryName != ''"> and salary_name like concat('%', #{salaryName}, '%')</if>
            <if test="basicSalary != null "> and basic_salary = #{basicSalary}</if>
            <if test="bonus != null "> and bonus = #{bonus}</if>
            <if test="lunchSalary != null "> and lunch_salary = #{lunchSalary}</if>
            <if test="trafficSalary != null "> and traffic_salary = #{trafficSalary}</if>
            <if test="allSalary != null "> and all_salary = #{allSalary}</if>
            <if test="pensionBase != null "> and pension_base = #{pensionBase}</if>
            <if test="pensionPer != null "> and pension_per = #{pensionPer}</if>
            <if test="medicalBase != null "> and medical_base = #{medicalBase}</if>
            <if test="medicalPer != null "> and medical_per = #{medicalPer}</if>
            <if test="accumulationFundbase != null "> and accumulation_fundbase = #{accumulationFundbase}</if>
            <if test="accumulationFundper != null "> and accumulation_fundper = #{accumulationFundper}</if>
        </where>
    </select>
    
    <select id="selectHrSalaryBySalaryId" parameterType="Long" resultMap="HrSalaryResult">
        <include refid="selectHrSalaryVo"/>
        where salary_id = #{salaryId}
    </select>
        
    <insert id="insertHrSalary" parameterType="HrSalary" useGeneratedKeys="true" keyProperty="salaryId">
        insert into hr_salary
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="salaryName != null">salary_name,</if>
            <if test="basicSalary != null">basic_salary,</if>
            <if test="bonus != null">bonus,</if>
            <if test="lunchSalary != null">lunch_salary,</if>
            <if test="trafficSalary != null">traffic_salary,</if>
            <if test="allSalary != null">all_salary,</if>
            <if test="pensionBase != null">pension_base,</if>
            <if test="pensionPer != null">pension_per,</if>
            <if test="medicalBase != null">medical_base,</if>
            <if test="medicalPer != null">medical_per,</if>
            <if test="accumulationFundbase != null">accumulation_fundbase,</if>
            <if test="accumulationFundper != null">accumulation_fundper,</if>
            create_time
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="salaryName != null">#{salaryName},</if>
            <if test="basicSalary != null">#{basicSalary},</if>
            <if test="bonus != null">#{bonus},</if>
            <if test="lunchSalary != null">#{lunchSalary},</if>
            <if test="trafficSalary != null">#{trafficSalary},</if>
            <if test="allSalary != null">#{allSalary},</if>
            <if test="pensionBase != null">#{pensionBase},</if>
            <if test="pensionPer != null">#{pensionPer},</if>
            <if test="medicalBase != null">#{medicalBase},</if>
            <if test="medicalPer != null">#{medicalPer},</if>
            <if test="accumulationFundbase != null">#{accumulationFundbase},</if>
            <if test="accumulationFundper != null">#{accumulationFundper},</if>
            sysdate()
         </trim>
    </insert>

    <update id="updateHrSalary" parameterType="HrSalary">
        update hr_salary
        <trim prefix="SET" suffixOverrides=",">
            <if test="salaryName != null">salary_name = #{salaryName},</if>
            <if test="basicSalary != null">basic_salary = #{basicSalary},</if>
            <if test="bonus != null">bonus = #{bonus},</if>
            <if test="lunchSalary != null">lunch_salary = #{lunchSalary},</if>
            <if test="trafficSalary != null">traffic_salary = #{trafficSalary},</if>
            <if test="allSalary != null">all_salary = #{allSalary},</if>
            <if test="pensionBase != null">pension_base = #{pensionBase},</if>
            <if test="pensionPer != null">pension_per = #{pensionPer},</if>
            <if test="medicalBase != null">medical_base = #{medicalBase},</if>
            <if test="medicalPer != null">medical_per = #{medicalPer},</if>
            <if test="accumulationFundbase != null">accumulation_fundbase = #{accumulationFundbase},</if>
            <if test="accumulationFundper != null">accumulation_fundper = #{accumulationFundper},</if>
            update_time = sysdate()
        </trim>
        where salary_id = #{salaryId}
    </update>

    <delete id="deleteHrSalaryBySalaryId" parameterType="Long">
        delete from hr_salary where salary_id = #{salaryId}
    </delete>

    <delete id="deleteHrSalaryBySalaryIds" parameterType="String">
        delete from hr_salary where salary_id in 
        <foreach item="salaryId" collection="array" open="(" separator="," close=")">
            #{salaryId}
        </foreach>
    </delete>
</mapper>